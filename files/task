**Tasks:**

- Add logging for inputs/outputs for debugging.
- Add CORS and HTTPS if needed.
- Test from Java app using synthetic data.

**Deliverable:**

- Final `risk_api.py` with logging + HTTPS support
- Integration guide: `ML_API_Integration.md`


- Build API with Flask or FastAPI.
- Add endpoint `/risk-score` that:
    - Accepts transaction features in JSON.
    - Returns:
        - `risk_score` (float)
        - `risk_flag` (e.g., “legit”, “suspicious”, “fraud”)
- Include test inputs and Swagger/OpenAPI doc.

**Deliverable:**

- Running Python microservice (`ml_risk_api/`)
- Example curl/Postman calls
- Swagger API doc


- Train using models like RandomForest, XGBoost or LightGBM.
- Use `risk_flag` as target label.
- Evaluate using metrics:
    - ROC-AUC
    - Precision / Recall
    - Confusion Matrix

**Deliverable:**

- Trained model: `risk_model.pkl`
- Evaluation report: `risk_model_eval.md`



**asks:**

- Implement a Python script that:
    - Simulates realistic financial transactions per user.
    - Embeds behavioral variation.
    - Includes a risk flag (label) using basic heuristics or randomization.
- Ensure inclusion of time-based behavior (hour of transaction, weekend flag, etc.).

**Deliverable:**

- `synthetic_behavioral_dataset.csv`
- Python script: `generate_behavioral_data.py`


- Define 8–15 behavioral features (example):
    - `avg_tx_amount`
    - `device_change_freq`
    - `tx_hour`
    - `location_change_freq`
    - `is_new_device`
- Map data types (numeric, categorical, boolean).
- Define logic for labeling transactions (`fraud`, `legit`, `suspicious`) based on combinations of features.

**Deliverable:**

- `feature_schema.json` or `.yaml` file describing each feature with examples and value ranges.
- Update `Behavioral_Authentication_ML.md` with schema overview.